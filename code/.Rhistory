}
# Chunk 15
dot_plot_list <- diabetic_clean %>%
select_if(is.character) %>%
map(printDotPlot)
# Chunk 16
diabetic_clean <- diabetic_clean %>%
select(-encounter_id, -patient_nbr)
diabetic_split <- initial_split(diabetic_clean)
iris_ch <- iris %>% mutate(Species = as.numeric(Species)) %>%
filter(Species != "virginica") %>%
head(70)
iris_ch
iris_ch %>% count(Species)
iris_recipe <- recipe(Species ~ ., data = iris_ch) %>%
step_downsample(Species)
prep(iris_recipe, iris_ch)
devtools::install_github("https://github.com/tidymodels/themis")
install.packages("devtools")
devtools::install_github("https://github.com/tidymodels/themis")
iris_ch %>% count(Species)
iris_recipe <- recipe(Species ~ ., data = iris_ch) %>%
step_downsample(Species)
prep(iris_recipe, iris_ch)
library(tidyverse)
library(tidymodels)
iris_ch <- iris %>% mutate(Species = as.numeric(Species)) %>%
filter(Species != "virginica") %>%
head(70)
iris_ch %>% count(Species)
iris_recipe <- recipe(Species ~ ., data = iris_ch) %>%
themis::step_downsample(Species)
prep(iris_recipe, iris_ch)
sessionInfo()
# Chunk 1
library(tidyverse)
library(tidymodels)
library(gt)
library(paletteer)
library(scales)
# load the data
diabetic_orig <- read_csv("../data/raw_data/diabetic_data.csv")
# Chunk 2
# set width = Inf so the tibble does not suppress columns in the console
print(diabetic_orig, width = Inf)
# Chunk 3
diabetic_orig %>%
map_dbl(function(.var) sum(.var == "?") / length(.var)) %>%
round(2) %>%
sort(decreasing = TRUE) %>%
head(10)
# Chunk 4
diabetic_orig %>%
map_dbl(n_distinct) %>%
sort()
# Chunk 5
diabetic_orig %>%
# remove the class and id variables
select_if(is.numeric) %>%
select(-encounter_id, -patient_nbr) %>%
# to each column/variable, create a data frame that contains the max and min
# value, and also add a column called "variable" that contains the column
# identifier (name)
map_df(~data.frame(min = min(., na.rm = T),
max = max(., na.rm = T)), .id = "variable")
# Chunk 6
diabetic_clean <- read_csv("../data/processed_data/diabetic_data_clean.csv")
# Chunk 7
# set width = Inf so the tibble does not suppress columns in the console
print(diabetic_clean, width = Inf)
# Chunk 8
diabetic_clean %>%
count(patient_nbr) %>%
arrange(desc(n))
# Chunk 9
diabetic_clean %>%
count(patient_nbr) %>%
arrange(desc(n)) %>%
ggplot() +
geom_histogram(aes(x = n), binwidth = 1, col = "white") +
scale_x_continuous("Number of encounters", breaks = 1:40) +
scale_y_continuous("Number of patients", expand = c(0, 0)) +
theme_classic()
# Chunk 10
diabetic_clean %>%
ggplot() +
geom_boxplot(aes(x = as.factor(readmitted), y = time_in_hospital),
varwidth = TRUE) +
theme_classic() # increase font size and remove grid background
# Chunk 11
plotBoxplots <- function(variable) {
diabetic_clean %>%
ggplot() +
geom_boxplot(aes(x = as.factor(readmitted), y = {{ variable }})) +
theme_classic() +
ggtitle(enquo(variable)) +
scale_x_discrete(NULL, labels = c("Not readmitted", "readmitted"))
}
plotBoxplots(age)
# Chunk 12
boxplot_list <- diabetic_clean %>%
# remove the variables we don't want to plot
select_if(is.numeric) %>%
select(-patient_nbr, -encounter_id, -readmitted) %>%
colnames() %>%
# apply the plotBoxplots function to each column name
map(plotBoxplots)
# Chunk 13
gridExtra::grid.arrange(grobs = boxplot_list)
# Chunk 14
printDotPlot <- function(.var) {
proportions <- diabetic_clean %>%
mutate(readmitted = if_else(readmitted == 1, "readmitted", "not readmitted")) %>%
count(readmitted, {{ .var }}) %>%
drop_na() %>%
group_by(readmitted) %>%
mutate(prop = round(n / sum(n), 3)) %>%
ungroup()
proportions %>%
ggplot() +
geom_point(aes(x = prop, y = {{ .var }}, col = readmitted),
size = 3, alpha = 0.8) +
theme_classic() +
theme(panel.grid.major.y = element_line(color = "grey50"),
axis.line = element_blank(),
legend.position = "top") +
scale_x_continuous("Proportion of patients", limits = c(0, 1))
}
# Chunk 15
dot_plot_list <- diabetic_clean %>%
select_if(is.character) %>%
map(printDotPlot)
# Chunk 16
diabetic_clean <- diabetic_clean %>%
select(-encounter_id, -patient_nbr)
diabetic_split <- initial_split(diabetic_clean)
# Chunk 17
# define the recipe
diabetic_recipe <-
# which consists of the formula (outcome ~ predictors)
recipe(readmitted ~ .,
data = diabetic_clean) %>%
# impute the missing values
step_meanimpute(all_numeric()) %>%
step_modeimpute(all_nominal()) %>%
step_downsample(readmitted) %>%
step_nzv(all_predictors()) %>%
step_dummy(all_nominal(), -readmitted)
# Chunk 18
prep(diabetic_recipe, diabetic_clean)
# Chunk 19
random_forest_model <-
# specify that the model is a random forest
rand_forest() %>%
# select the engine/package that underlies the model
set_engine("ranger", importance = "impurity") %>%
# choose either the continuous regression or binary classification mode
set_mode("classification")
# Chunk 20
logistic_regression_model <-
logistic_reg() %>%
set_engine("glm") %>%
set_mode("classification")
# Chunk 21
# RF workflow
random_forest_workflow <- workflow() %>%
# add the recipe
add_recipe(diabetic_recipe) %>%
# add the model
add_model(random_forest_model)
# LR workflow
logistic_regression_workflow <- workflow() %>%
# add the recipe
add_recipe(diabetic_recipe) %>%
# add the model
add_model(logistic_regression_model)
# Chunk 22
random_forest_fit <- random_forest_workflow %>%
# fit on the training set and evaluate on test set
last_fit(diabetic_split)
random_forest_fit %>% collect_metrics()
# Chunk 23
logistic_regression_fit <- logistic_regression_workflow %>%
# fit on the training set and evaluate on test set
last_fit(diabetic_split)
logistic_regression_fit %>% collect_metrics()
diabetic_clean %>%
count(patient_nbr) %>%
arrange(desc(n)) %>%
ggplot() +
geom_histogram(aes(x = n), binwidth = 1, col = "white") +
scale_x_continuous("Number of encounters", breaks = 1:40) +
scale_y_continuous("Number of patients", expand = c(0, 0)) +
theme_classic()
diabetic_clean %>%
count(patient_nbr) %>%
arrange(desc(n)) %>%
ggplot() +
geom_histogram(aes(x = n), binwidth = 1, col = "white") +
scale_x_continuous("Number of encounters", breaks = 1:40) +
scale_y_continuous("Number of patients", expand = c(0, 0)) +
theme_classic()
# Chunk 1
library(tidyverse)
library(tidymodels)
library(gt)
library(paletteer)
library(scales)
# load the data
diabetic_orig <- read_csv("../data/raw_data/diabetic_data.csv")
# Chunk 2
# set width = Inf so the tibble does not suppress columns in the console
print(diabetic_orig, width = Inf)
# Chunk 3
diabetic_orig %>%
map_dbl(function(.var) sum(.var == "?") / length(.var)) %>%
round(2) %>%
sort(decreasing = TRUE) %>%
head(10)
# Chunk 4
diabetic_orig %>%
map_dbl(n_distinct) %>%
sort()
# Chunk 5
diabetic_orig %>%
# remove the class and id variables
select_if(is.numeric) %>%
select(-encounter_id, -patient_nbr) %>%
# to each column/variable, create a data frame that contains the max and min
# value, and also add a column called "variable" that contains the column
# identifier (name)
map_df(~data.frame(min = min(., na.rm = T),
max = max(., na.rm = T)), .id = "variable")
# Chunk 6
diabetic_clean <- read_csv("../data/processed_data/diabetic_data_clean.csv")
# Chunk 7
# set width = Inf so the tibble does not suppress columns in the console
print(diabetic_clean, width = Inf)
# Chunk 8
diabetic_clean %>%
count(patient_nbr) %>%
arrange(desc(n))
diabetic_clean %>%
count(patient_nbr) %>%
arrange(desc(n)) %>%
ggplot() +
geom_histogram(aes(x = n), binwidth = 1, col = "white") +
scale_x_continuous("Number of encounters", breaks = 1:40) +
scale_y_continuous("Number of patients", expand = c(0, 0)) +
theme_classic()
diabetic_clean %>%
ggplot() +
geom_boxplot(aes(x = as.factor(readmitted), y = time_in_hospital),
varwidth = TRUE) +
theme_classic() # increase font size and remove grid background
plotBoxplots <- function(variable) {
diabetic_clean %>%
ggplot() +
geom_boxplot(aes(x = as.factor(readmitted), y = {{ variable }})) +
theme_classic() +
ggtitle(enquo(variable)) +
scale_x_discrete(NULL, labels = c("Not readmitted", "readmitted"))
}
plotBoxplots <- function(variable) {
diabetic_clean %>%
ggplot() +
geom_boxplot(aes(x = readmitted, y = {{ variable }})) +
theme_classic() +
ggtitle(enquo(variable)) +
scale_x_discrete(NULL, labels = c("Not readmitted", "readmitted"))
}
plotBoxplots(age)
boxplot_list <- diabetic_clean %>%
# remove the variables we don't want to plot
select_if(is.numeric) %>%
select(-patient_nbr, -encounter_id, -readmitted) %>%
colnames() %>%
# apply the plotBoxplots function to each column name
map(plotBoxplots)
boxplot_list <- diabetic_clean %>%
# remove the variables we don't want to plot
select_if(is.numeric) %>%
select(-patient_nbr, -encounter_id) %>%
colnames() %>%
# apply the plotBoxplots function to each column name
map(plotBoxplots)
gridExtra::grid.arrange(grobs = boxplot_list)
boxplot_list <- diabetic_clean %>%
# remove the variables we don't want to plot
select_if(is.numeric) %>%
select(-patient_nbr, -encounter_id) %>%
# apply the plotBoxplots function to each column name
map(plotBoxplots)
gridExtra::grid.arrange(grobs = boxplot_list)
boxplot_list <- diabetic_clean %>%
# remove the variables we don't want to plot
select_if(is.numeric) %>%
select(-patient_nbr, -encounter_id, -readmitted) %>%
# apply the plotBoxplots function to each column name
map(plotBoxplots)
gridExtra::grid.arrange(grobs = boxplot_list)
boxplot_list <- diabetic_clean %>%
# remove the variables we don't want to plot
select_if(is.numeric) %>%
select(-patient_nbr, -encounter_id) %>%
# apply the plotBoxplots function to each column name
map(plotBoxplots)
gridExtra::grid.arrange(grobs = boxplot_list)
plotBoxplots(age)
boxplot_list <- diabetic_clean %>%
# remove the variables we don't want to plot
select_if(is.numeric) %>%
select(-patient_nbr, -encounter_id) %>%
# apply the plotBoxplots function to each column name
map(plotBoxplots)
gridExtra::grid.arrange(grobs = boxplot_list)
printDotPlot <- function(.var) {
proportions <- diabetic_clean %>%
mutate(readmitted = if_else(readmitted == 1, "readmitted", "not readmitted")) %>%
count(readmitted, {{ .var }}) %>%
drop_na() %>%
group_by(readmitted) %>%
mutate(prop = round(n / sum(n), 3)) %>%
ungroup()
proportions %>%
ggplot() +
geom_point(aes(x = prop, y = {{ .var }}, col = readmitted),
size = 3, alpha = 0.8) +
theme_classic() +
theme(panel.grid.major.y = element_line(color = "grey50"),
axis.line = element_blank(),
legend.position = "top") +
scale_x_continuous("Proportion of patients", limits = c(0, 1))
}
diabetic_clean %>%
# remove the variables we don't want to plot
select_if(is.numeric) %>%
select(-patient_nbr, -encounter_id) %>%
head
dot_plot_list <- diabetic_clean %>%
select_if(is.character) %>%
map(printDotPlot)
gridExtra::grid.arrange(grobs = dot_plot_list)
proportions <- diabetic_clean %>%
mutate(readmitted = if_else(readmitted == 1, "readmitted", "not readmitted")) %>%
count(readmitted, gender) %>%
drop_na() %>%
group_by(readmitted) %>%
mutate(prop = round(n / sum(n), 3)) %>%
ungroup()
proportions
proportions %>%
ggplot() +
geom_point(aes(x = prop, y = gender, col = readmitted),
size = 3, alpha = 0.8) +
theme_classic() +
theme(panel.grid.major.y = element_line(color = "grey50"),
axis.line = element_blank(),
legend.position = "top") +
scale_x_continuous("Proportion of patients", limits = c(0, 1))
printDotPlot <- function(.var) {
proportions <- diabetic_clean %>%
count(readmitted, {{ .var }}) %>%
drop_na() %>%
group_by(readmitted) %>%
mutate(prop = round(n / sum(n), 3)) %>%
ungroup()
proportions %>%
ggplot() +
geom_point(aes(x = prop, y = {{ .var }}, col = readmitted),
size = 3, alpha = 0.8) +
theme_classic() +
theme(panel.grid.major.y = element_line(color = "grey50"),
axis.line = element_blank(),
legend.position = "top") +
scale_x_continuous("Proportion of patients", limits = c(0, 1))
}
dot_plot_list <- diabetic_clean %>%
select_if(is.character) %>%
map(printDotPlot)
gridExtra::grid.arrange(grobs = dot_plot_list)
diabetic_clean %>%
count(readmitted, gender) %>%
drop_na() %>%
group_by(readmitted) %>%
mutate(prop = round(n / sum(n), 3)) %>%
ungroup()
diabetic_clean %>%
count(readmitted, gender) %>%
drop_na() %>%
group_by(readmitted) %>%
mutate(prop = round(n / sum(n), 3)) %>%
ungroup() -> readmitted
diabetic_clean %>%
count(readmitted, gender) %>%
drop_na() %>%
group_by(readmitted) %>%
mutate(prop = round(n / sum(n), 3)) %>%
ungroup() -> proportions
proportions
proportions %>%
ggplot() +
geom_point(aes(x = prop, y = gender, col = readmitted),
size = 3, alpha = 0.8)
printDotPlot <- function(.var) {
proportions <- diabetic_clean %>%
count(readmitted, {{ .var }}) %>%
drop_na() %>%
group_by(readmitted) %>%
mutate(prop = round(n / sum(n), 3)) %>%
ungroup()
proportions %>%
ggplot() +
geom_point(aes(x = prop, y = {{ .var }}, col = readmitted),
size = 3, alpha = 0.8) +
theme_classic() +
theme(panel.grid.major.y = element_line(color = "grey50"),
axis.line = element_blank(),
legend.position = "top") +
scale_x_continuous("Proportion of patients", limits = c(0, 1))
}
dot_plot_list <- diabetic_clean %>%
select_if(is.character) %>%
map(printDotPlot)
gridExtra::grid.arrange(grobs = dot_plot_list)
dot_plot_list[[1]]
dot_plot_list
proportions %>%
ggplot() +
geom_point(aes(x = prop, y = gender, col = readmitted),
size = 3, alpha = 0.8) +
theme_classic() +
theme(panel.grid.major.y = element_line(color = "grey50"),
axis.line = element_blank(),
legend.position = "top") +
scale_x_continuous("Proportion of patients", limits = c(0, 1))
printDotPlot <- function(.var) {
proportions <- diabetic_clean %>%
count(readmitted, .data[[.var]]) %>%
drop_na() %>%
group_by(readmitted) %>%
mutate(prop = round(n / sum(n), 3)) %>%
ungroup()
proportions %>%
ggplot() +
geom_point(aes(x = prop, y = .data[[.var]], col = readmitted),
size = 3, alpha = 0.8) +
theme_classic() +
theme(panel.grid.major.y = element_line(color = "grey50"),
axis.line = element_blank(),
legend.position = "top") +
scale_x_continuous("Proportion of patients", limits = c(0, 1))
}
dot_plot_list <- diabetic_clean %>%
select_if(is.character) %>%
colnames %>%
map(printDotPlot)
gridExtra::grid.arrange(grobs = dot_plot_list)
plotBoxplots <- function(.var) {
diabetic_clean %>%
ggplot() +
geom_boxplot(aes(x = readmitted, y = .data[[.var]])) +
theme_classic() +
ggtitle(.data[[.var]]) +
scale_x_discrete(NULL, labels = c("Not readmitted", "readmitted"))
}
diabetic_clean <- diabetic_clean %>%
select(-encounter_id, -patient_nbr)
diabetic_split <- initial_split(diabetic_clean)
# define the recipe
diabetic_recipe <-
# which consists of the formula (outcome ~ predictors)
recipe(readmitted ~ .,
data = diabetic_clean) %>%
# impute the missing values
step_meanimpute(all_numeric()) %>%
step_modeimpute(all_nominal()) %>%
step_downsample(readmitted) %>%
step_nzv(all_predictors()) %>%
step_dummy(all_nominal(), -readmitted)
prep(diabetic_recipe, diabetic_clean)
random_forest_model <-
# specify that the model is a random forest
rand_forest() %>%
# select the engine/package that underlies the model
set_engine("ranger", importance = "impurity") %>%
# choose either the continuous regression or binary classification mode
set_mode("classification")
logistic_regression_model <-
logistic_reg() %>%
set_engine("glm") %>%
set_mode("classification")
# RF workflow
random_forest_workflow <- workflow() %>%
# add the recipe
add_recipe(diabetic_recipe) %>%
# add the model
add_model(random_forest_model)
# LR workflow
logistic_regression_workflow <- workflow() %>%
# add the recipe
add_recipe(diabetic_recipe) %>%
# add the model
add_model(logistic_regression_model)
random_forest_fit <- random_forest_workflow %>%
# fit on the training set and evaluate on test set
last_fit(diabetic_split)
random_forest_fit %>% collect_metrics()
logistic_regression_fit <- logistic_regression_workflow %>%
# fit on the training set and evaluate on test set
last_fit(diabetic_split)
logistic_regression_fit %>% collect_metrics()
